# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'hw1_05_NM6101098.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt
from keras.models import load_model
import cv2
import os
import pathlib


class Ui_Dialog(object):
    def __init__(self):
        path = os.getcwd()
        os.chdir("./Hw1_05_NM6101098_V1")
        self.class_img=cv2.imread(".\\result_img\\class_img.jpg")
        self.hyperparameters_img=cv2.imread(".\\result_img\\hyperparameters_img.jpg")
        self.model_img=cv2.imread(".\\result_img\\model_img.jpg")
        self.acc_img=cv2.imread(".\\result_img\\acc_img.jpg")
        self.loss_img=cv2.imread(".\\result_img\\loss_img.jpg")
        self.vgg_model_path = ".\\result_img\\VGG16.h5"
        self.class_names = ['airplane', 'automobile', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse', 'ship', 'truck']
        self.input_temp = []
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(400, 300)
        self.groupBox = QtWidgets.QGroupBox(Dialog)
        self.groupBox.setGeometry(QtCore.QRect(30, 10, 341, 281))
        self.groupBox.setObjectName("groupBox")
        self.pushButton_1 = QtWidgets.QPushButton(self.groupBox)
        self.pushButton_1.setGeometry(QtCore.QRect(50, 30, 211, 28))
        self.pushButton_1.setObjectName("pushButton")
        # self.textEdit = QtWidgets.QTextEdit(self.groupBox)
        # self.textEdit.setGeometry(QtCore.QRect(40, 180, 231, 31))
        # self.textEdit.setObjectName("textEdit")

        self.lineEdit = QtWidgets.QLineEdit(self.groupBox)
        self.lineEdit.setGeometry(QtCore.QRect(50, 180, 211, 31))
        self.lineEdit.setObjectName("lineEdit")

        self.pushButton_2 = QtWidgets.QPushButton(self.groupBox)
        self.pushButton_2.setGeometry(QtCore.QRect(50, 60, 211, 28))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_3 = QtWidgets.QPushButton(self.groupBox)
        self.pushButton_3.setGeometry(QtCore.QRect(50, 90, 211, 28))
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_4 = QtWidgets.QPushButton(self.groupBox)
        self.pushButton_4.setGeometry(QtCore.QRect(50, 130, 211, 28))
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_5 = QtWidgets.QPushButton(self.groupBox)
        self.pushButton_5.setGeometry(QtCore.QRect(50, 230, 211, 28))
        self.pushButton_5.setObjectName("pushButton_5")

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Dialog"))
        self.groupBox.setTitle(_translate("Dialog", "Hw1_05"))
        self.pushButton_1.setText(_translate("Dialog", "1. Show Train Images"))
        self.pushButton_2.setText(_translate("Dialog", "2. Show HyperParameter"))
        self.pushButton_3.setText(_translate("Dialog", "3. Show Model Shortcut"))
        self.pushButton_4.setText(_translate("Dialog", "4. Show Accuracy"))
        self.pushButton_5.setText(_translate("Dialog", "5. Test"))
        #按鈕事件
        self.pushButton_1.clicked.connect(self.show_train_image)
        self.pushButton_2.clicked.connect(self.show_hyperparameters)
        self.pushButton_3.clicked.connect(self.show_model_shortcut)
        self.pushButton_4.clicked.connect(self.show_accuracy)
        self.pushButton_5.clicked.connect(self.test)
    def show_train_image(self):
        print('cliked show_train_image')
        cv2.destroyAllWindows()
        cv2.imshow('class_img',self.class_img)
        cv2.waitKey(0)
        pass

    def show_hyperparameters(self):
        print('cliked show_hyperparameters')
        cv2.destroyAllWindows()
        cv2.imshow('hyperparameters_img',self.hyperparameters_img)
        cv2.waitKey(0)
        pass

    def show_model_shortcut(self):
        print('clicked show_model_shortcut')
        cv2.destroyAllWindows()
        cv2.imshow('model_img',self.model_img)
        cv2.waitKey(0)
        pass

    def show_accuracy(self):
        print('clicked show_accuracy')
        cv2.destroyAllWindows()
        plt.axis("off")
        plt.subplot(2,1,1)
        plt.imshow(self.acc_img)
    
        
        plt.subplot(2,1,2)
        plt.axis("off")
        plt.imshow(self.loss_img)
        plt.show()
        pass
    def test(self):
        print('clicked test')
        plt.close("all")
        model = load_model(self.vgg_model_path)
        input_img_name = self.lineEdit.text()
        
        probability_model = tf.keras.Sequential([model, tf.keras.layers.Softmax()])
        img = cv2.imread(f"result_img/{input_img_name}.jpg") /255
        self.input_temp.append(img)
        self.input_temp = np.array(self.input_temp)
        probability = probability_model.predict(self.input_temp)
        bar_name=probability[0]
        title_name=self.class_names[np.argmax(probability)]
        plt.subplot(1,2,2)
        plt.bar(self.class_names,bar_name,0.7)
        plt.subplot(1,2,1)
        plt.title(f"predict = {title_name}")
        image = plt.imshow(img)
        image.axes.get_xaxis().set_visible(False)
        image.axes.get_yaxis().set_visible(False)
        plt.show()
        pass
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_Dialog()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec_())
